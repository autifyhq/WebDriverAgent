"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _nodeSimctl = _interopRequireDefault(require("node-simctl"));

var _appiumXcode = require("appium-xcode");

var _appiumIosSimulator = require("appium-ios-simulator");

var _simulator = require("./helpers/simulator");

var _teen_process = require("teen_process");

var _desired = require("./desired");

var _asyncbox = require("asyncbox");

var _ = require("../..");

var _axios = _interopRequireDefault(require("axios"));

const SIM_DEVICE_NAME = 'webDriverAgentTest';
const MOCHA_TIMEOUT = 60 * 1000 * (process.env.CI ? 0 : 4);

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

let testUrl = 'http://localhost:8100/tree';

function getStartOpts(device) {
  return {
    device,
    platformVersion: _desired.PLATFORM_VERSION,
    host: 'localhost',
    port: 8100,
    realDevice: false,
    showXcodeLog: true,
    wdaLaunchTimeout: 60 * 3 * 1000,
    simulatorStartupTimeout: 60 * 4 * 1000
  };
}

describe('WebDriverAgent', function () {
  this.timeout(MOCHA_TIMEOUT);
  let xcodeVersion;
  before(async function () {
    if (process.env.CLOUD) {
      this.skip();
    }

    xcodeVersion = await (0, _appiumXcode.getVersion)(true);
  });
  describe('with fresh sim', function () {
    let device;
    let simctl;
    before(async function () {
      simctl = new _nodeSimctl.default();
      simctl.udid = await simctl.createDevice(SIM_DEVICE_NAME, _desired.DEVICE_NAME, _desired.PLATFORM_VERSION);
      device = await (0, _appiumIosSimulator.getSimulator)(simctl.udid);
    });
    after(async function () {
      this.timeout(MOCHA_TIMEOUT);
      await (0, _simulator.shutdownSimulator)(device);
      await simctl.deleteDevice();
    });
    describe('with running sim', function () {
      this.timeout(6 * 60 * 1000);
      beforeEach(async function () {
        await (0, _simulator.killAllSimulators)();
        await device.run();
      });
      afterEach(async function () {
        try {
          await (0, _asyncbox.retryInterval)(5, 1000, async function () {
            await (0, _simulator.shutdownSimulator)(device);
          });
        } catch (ign) {}
      });
      it('should launch agent on a sim', async function () {
        const agent = new _.WebDriverAgent(xcodeVersion, getStartOpts(device));
        await agent.launch('sessionId');
        await (0, _axios.default)({
          url: testUrl
        }).should.be.eventually.rejected;
        await agent.quit();
      });
      it('should fail if xcodebuild fails', async function () {
        this.timeout(35 * 1000);
        const agent = new _.WebDriverAgent(xcodeVersion, getStartOpts(device));

        agent.xcodebuild.createSubProcess = async function () {
          let args = ['-workspace', `${this.agentPath}dfgs`];
          return new _teen_process.SubProcess('xcodebuild', args, {
            detached: true
          });
        };

        await agent.launch('sessionId').should.eventually.be.rejectedWith('xcodebuild failed');
        await agent.quit();
      });
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
