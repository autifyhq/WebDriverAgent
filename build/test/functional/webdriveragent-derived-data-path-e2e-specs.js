"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _appiumIosSimulator = require("appium-ios-simulator");

var _simulator = require("./helpers/simulator");

var _nodeSimctl = _interopRequireDefault(require("node-simctl"));

var _session = require("./helpers/session");

var _desired = require("./desired");

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

const SIM_DEVICE_NAME = 'xcuitestDriverTest';
const TEMP_FOLDER = '/tmp/WebDriverAgent';

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

describe('WebDriverAgent Derived Data Path', function () {
  this.timeout(_session.MOCHA_TIMEOUT);
  let baseCaps;
  let caps;
  let driver;
  before(async function () {
    const udid = await new _nodeSimctl.default().createDevice(SIM_DEVICE_NAME, _desired.UICATALOG_SIM_CAPS.deviceName, _desired.UICATALOG_SIM_CAPS.platformVersion);
    baseCaps = Object.assign({}, _desired.UICATALOG_SIM_CAPS, {
      udid
    });
    caps = Object.assign({
      usePrebuiltWDA: true,
      agentPath: _path.default.join(TEMP_FOLDER, 'WebDriverAgent.xcodeproj'),
      derivedDataPath: _path.default.join(TEMP_FOLDER, 'DerivedData', 'WebDriverAgent')
    }, baseCaps);

    const wda_path = _path.default.join(process.cwd(), 'WebDriverAgent');

    _fs.default.symlinkSync(wda_path, TEMP_FOLDER);
  });
  after(async function () {
    const sim = await (0, _appiumIosSimulator.getSimulator)(caps.udid);
    await (0, _simulator.shutdownSimulator)(sim);
    await (0, _simulator.deleteDeviceWithRetry)(caps.udid);

    _fs.default.unlinkSync(TEMP_FOLDER);
  });
  afterEach(async function () {
    await (0, _session.deleteSession)();
  });

  if (!process.env.REAL_DEVICE) {
    it.skip('should start and stop a session', async function () {
      driver = await (0, _session.initSession)(caps, this);
      let els = await driver.elementsByClassName('XCUIElementTypeWindow');
      els.length.should.be.at.least(1);
    });
  }
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL3dlYmRyaXZlcmFnZW50LWRlcml2ZWQtZGF0YS1wYXRoLWUyZS1zcGVjcy5qcyIsIm5hbWVzIjpbIlNJTV9ERVZJQ0VfTkFNRSIsIlRFTVBfRk9MREVSIiwiY2hhaSIsInNob3VsZCIsInVzZSIsImNoYWlBc1Byb21pc2VkIiwiZGVzY3JpYmUiLCJ0aW1lb3V0IiwiTU9DSEFfVElNRU9VVCIsImJhc2VDYXBzIiwiY2FwcyIsImRyaXZlciIsImJlZm9yZSIsInVkaWQiLCJTaW1jdGwiLCJjcmVhdGVEZXZpY2UiLCJVSUNBVEFMT0dfU0lNX0NBUFMiLCJkZXZpY2VOYW1lIiwicGxhdGZvcm1WZXJzaW9uIiwiT2JqZWN0IiwiYXNzaWduIiwidXNlUHJlYnVpbHRXREEiLCJhZ2VudFBhdGgiLCJwYXRoIiwiam9pbiIsImRlcml2ZWREYXRhUGF0aCIsIndkYV9wYXRoIiwicHJvY2VzcyIsImN3ZCIsImZzIiwic3ltbGlua1N5bmMiLCJhZnRlciIsInNpbSIsImdldFNpbXVsYXRvciIsInNodXRkb3duU2ltdWxhdG9yIiwiZGVsZXRlRGV2aWNlV2l0aFJldHJ5IiwidW5saW5rU3luYyIsImFmdGVyRWFjaCIsImRlbGV0ZVNlc3Npb24iLCJlbnYiLCJSRUFMX0RFVklDRSIsIml0Iiwic2tpcCIsImluaXRTZXNzaW9uIiwiZWxzIiwiZWxlbWVudHNCeUNsYXNzTmFtZSIsImxlbmd0aCIsImJlIiwiYXQiLCJsZWFzdCJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4iLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC93ZWJkcml2ZXJhZ2VudC1kZXJpdmVkLWRhdGEtcGF0aC1lMmUtc3BlY3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgeyBnZXRTaW11bGF0b3IgfSBmcm9tICdhcHBpdW0taW9zLXNpbXVsYXRvcic7XG5pbXBvcnQgeyBzaHV0ZG93blNpbXVsYXRvciwgZGVsZXRlRGV2aWNlV2l0aFJldHJ5IH0gZnJvbSAnLi9oZWxwZXJzL3NpbXVsYXRvcic7XG5pbXBvcnQgU2ltY3RsIGZyb20gJ25vZGUtc2ltY3RsJztcbmltcG9ydCB7IE1PQ0hBX1RJTUVPVVQsIGluaXRTZXNzaW9uLCBkZWxldGVTZXNzaW9uIH0gZnJvbSAnLi9oZWxwZXJzL3Nlc3Npb24nO1xuaW1wb3J0IHsgVUlDQVRBTE9HX1NJTV9DQVBTIH0gZnJvbSAnLi9kZXNpcmVkJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuXG5jb25zdCBTSU1fREVWSUNFX05BTUUgPSAneGN1aXRlc3REcml2ZXJUZXN0JztcbmNvbnN0IFRFTVBfRk9MREVSID0gJy90bXAvV2ViRHJpdmVyQWdlbnQnO1xuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgnV2ViRHJpdmVyQWdlbnQgRGVyaXZlZCBEYXRhIFBhdGgnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMudGltZW91dChNT0NIQV9USU1FT1VUKTtcblxuICBsZXQgYmFzZUNhcHM7XG4gIGxldCBjYXBzO1xuXG4gIGxldCBkcml2ZXI7XG4gIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdWRpZCA9IGF3YWl0IG5ldyBTaW1jdGwoKS5jcmVhdGVEZXZpY2UoXG4gICAgICBTSU1fREVWSUNFX05BTUUsXG4gICAgICBVSUNBVEFMT0dfU0lNX0NBUFMuZGV2aWNlTmFtZSxcbiAgICAgIFVJQ0FUQUxPR19TSU1fQ0FQUy5wbGF0Zm9ybVZlcnNpb25cbiAgICApO1xuICAgIGJhc2VDYXBzID0gT2JqZWN0LmFzc2lnbih7fSwgVUlDQVRBTE9HX1NJTV9DQVBTLCB7dWRpZH0pO1xuICAgIGNhcHMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIHVzZVByZWJ1aWx0V0RBOiB0cnVlLFxuICAgICAgYWdlbnRQYXRoOiBwYXRoLmpvaW4oVEVNUF9GT0xERVIsICdXZWJEcml2ZXJBZ2VudC54Y29kZXByb2onKSxcbiAgICAgIGRlcml2ZWREYXRhUGF0aDogcGF0aC5qb2luKFRFTVBfRk9MREVSLCAnRGVyaXZlZERhdGEnLCAnV2ViRHJpdmVyQWdlbnQnKVxuICAgIH0sIGJhc2VDYXBzKTtcbiAgICAvLyBjb3B5IGV4aXN0aW5nIFdlYkRyaXZlckFnZW50IHRvIHRoZSBzZWxlY3RlZCBkZXJpdmVkRGF0YVBhdGggZm9sZGVyXG4gICAgY29uc3Qgd2RhX3BhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ1dlYkRyaXZlckFnZW50Jyk7XG4gICAgZnMuc3ltbGlua1N5bmMod2RhX3BhdGgsIFRFTVBfRk9MREVSKTtcbiAgfSk7XG4gIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzaW0gPSBhd2FpdCBnZXRTaW11bGF0b3IoY2Fwcy51ZGlkKTtcbiAgICBhd2FpdCBzaHV0ZG93blNpbXVsYXRvcihzaW0pO1xuICAgIGF3YWl0IGRlbGV0ZURldmljZVdpdGhSZXRyeShjYXBzLnVkaWQpO1xuICAgIC8vIGRlbGV0ZSBjcmVhdGVkIHRtcCBmb2xkZXJcbiAgICBmcy51bmxpbmtTeW5jKFRFTVBfRk9MREVSKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAvLyB0cnkgdG8gZ2V0IHJpZCBvZiB0aGUgZHJpdmVyLCBzbyBpZiBhIHRlc3QgZmFpbHMgdGhlIHJlc3Qgb2YgdGhlXG4gICAgLy8gdGVzdHMgYXJlbid0IGNvbXByb21pc2VkXG4gICAgYXdhaXQgZGVsZXRlU2Vzc2lvbigpO1xuICB9KTtcblxuICBpZiAoIXByb2Nlc3MuZW52LlJFQUxfREVWSUNFKSB7XG4gICAgaXQuc2tpcCgnc2hvdWxkIHN0YXJ0IGFuZCBzdG9wIGEgc2Vzc2lvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlciA9IGF3YWl0IGluaXRTZXNzaW9uKGNhcHMsIHRoaXMpO1xuICAgICAgbGV0IGVscyA9IGF3YWl0IGRyaXZlci5lbGVtZW50c0J5Q2xhc3NOYW1lKCdYQ1VJRWxlbWVudFR5cGVXaW5kb3cnKTtcbiAgICAgIGVscy5sZW5ndGguc2hvdWxkLmJlLmF0LmxlYXN0KDEpO1xuICAgIH0pO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsZUFBZSxHQUFHLG9CQUF4QjtBQUNBLE1BQU1DLFdBQVcsR0FBRyxxQkFBcEI7O0FBRUFDLGFBQUEsQ0FBS0MsTUFBTDs7QUFDQUQsYUFBQSxDQUFLRSxHQUFMLENBQVNDLHVCQUFUOztBQUVBQyxRQUFRLENBQUMsa0NBQUQsRUFBcUMsWUFBWTtFQUN2RCxLQUFLQyxPQUFMLENBQWFDLHNCQUFiO0VBRUEsSUFBSUMsUUFBSjtFQUNBLElBQUlDLElBQUo7RUFFQSxJQUFJQyxNQUFKO0VBQ0FDLE1BQU0sQ0FBQyxrQkFBa0I7SUFDdkIsTUFBTUMsSUFBSSxHQUFHLE1BQU0sSUFBSUMsbUJBQUosR0FBYUMsWUFBYixDQUNqQmYsZUFEaUIsRUFFakJnQiwyQkFBQSxDQUFtQkMsVUFGRixFQUdqQkQsMkJBQUEsQ0FBbUJFLGVBSEYsQ0FBbkI7SUFLQVQsUUFBUSxHQUFHVSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSiwyQkFBbEIsRUFBc0M7TUFBQ0g7SUFBRCxDQUF0QyxDQUFYO0lBQ0FILElBQUksR0FBR1MsTUFBTSxDQUFDQyxNQUFQLENBQWM7TUFDbkJDLGNBQWMsRUFBRSxJQURHO01BRW5CQyxTQUFTLEVBQUVDLGFBQUEsQ0FBS0MsSUFBTCxDQUFVdkIsV0FBVixFQUF1QiwwQkFBdkIsQ0FGUTtNQUduQndCLGVBQWUsRUFBRUYsYUFBQSxDQUFLQyxJQUFMLENBQVV2QixXQUFWLEVBQXVCLGFBQXZCLEVBQXNDLGdCQUF0QztJQUhFLENBQWQsRUFJSlEsUUFKSSxDQUFQOztJQU1BLE1BQU1pQixRQUFRLEdBQUdILGFBQUEsQ0FBS0MsSUFBTCxDQUFVRyxPQUFPLENBQUNDLEdBQVIsRUFBVixFQUF5QixnQkFBekIsQ0FBakI7O0lBQ0FDLFdBQUEsQ0FBR0MsV0FBSCxDQUFlSixRQUFmLEVBQXlCekIsV0FBekI7RUFDRCxDQWZLLENBQU47RUFnQkE4QixLQUFLLENBQUMsa0JBQWtCO0lBQ3RCLE1BQU1DLEdBQUcsR0FBRyxNQUFNLElBQUFDLGdDQUFBLEVBQWF2QixJQUFJLENBQUNHLElBQWxCLENBQWxCO0lBQ0EsTUFBTSxJQUFBcUIsNEJBQUEsRUFBa0JGLEdBQWxCLENBQU47SUFDQSxNQUFNLElBQUFHLGdDQUFBLEVBQXNCekIsSUFBSSxDQUFDRyxJQUEzQixDQUFOOztJQUVBZ0IsV0FBQSxDQUFHTyxVQUFILENBQWNuQyxXQUFkO0VBQ0QsQ0FOSSxDQUFMO0VBUUFvQyxTQUFTLENBQUMsa0JBQWtCO0lBRzFCLE1BQU0sSUFBQUMsc0JBQUEsR0FBTjtFQUNELENBSlEsQ0FBVDs7RUFNQSxJQUFJLENBQUNYLE9BQU8sQ0FBQ1ksR0FBUixDQUFZQyxXQUFqQixFQUE4QjtJQUM1QkMsRUFBRSxDQUFDQyxJQUFILENBQVEsaUNBQVIsRUFBMkMsa0JBQWtCO01BQzNEL0IsTUFBTSxHQUFHLE1BQU0sSUFBQWdDLG9CQUFBLEVBQVlqQyxJQUFaLEVBQWtCLElBQWxCLENBQWY7TUFDQSxJQUFJa0MsR0FBRyxHQUFHLE1BQU1qQyxNQUFNLENBQUNrQyxtQkFBUCxDQUEyQix1QkFBM0IsQ0FBaEI7TUFDQUQsR0FBRyxDQUFDRSxNQUFKLENBQVczQyxNQUFYLENBQWtCNEMsRUFBbEIsQ0FBcUJDLEVBQXJCLENBQXdCQyxLQUF4QixDQUE4QixDQUE5QjtJQUNELENBSkQ7RUFLRDtBQUNGLENBNUNPLENBQVIifQ==
