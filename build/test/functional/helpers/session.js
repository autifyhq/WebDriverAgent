"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PORT = exports.MOCHA_TIMEOUT = exports.HOST = void 0;
exports.deleteSession = deleteSession;
exports.getServer = getServer;
exports.initDriver = initDriver;
exports.initSession = initSession;

require("source-map-support/register");

var _wd = _interopRequireDefault(require("wd"));

var _2 = require("../../..");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _axios = _interopRequireDefault(require("axios"));

const {
  SAUCE_RDC,
  SAUCE_EMUSIM,
  CLOUD
} = process.env;

function getPort() {
  if (SAUCE_EMUSIM || SAUCE_RDC) {
    return 80;
  }

  return 4994;
}

function getHost() {
  if (SAUCE_RDC) {
    return 'appium.staging.testobject.org';
  } else if (SAUCE_EMUSIM) {
    return 'ondemand.saucelabs.com';
  }

  return process.env.REAL_DEVICE ? _appiumSupport.util.localIp() : 'localhost';
}

const HOST = getHost();
exports.HOST = HOST;
const PORT = getPort();
exports.PORT = PORT;
const MOCHA_TIMEOUT = 60 * 1000 * (process.env.CI ? 0 : 4);
exports.MOCHA_TIMEOUT = MOCHA_TIMEOUT;
const WDA_PORT = 8200;
let driver, server;

if (CLOUD) {
  before(function () {
    process.env.SAUCE_JOB_NAME = `${process.env.TRAVIS_JOB_NUMBER || 'Suite'}: ${this.test.parent.suites[0].title}`;
  });
  afterEach(function () {
    if (driver) {
      let fullTitle;

      if (!driver.name) {
        let titles = [];
        const currentTest = this.currentTest;
        titles.push(currentTest.title);
        let parent = currentTest.parent;

        while (parent) {
          if (parent.title) {
            titles.push(parent.title);
          }

          parent = parent.parent;
        }

        fullTitle = titles.reverse().join('/');
        driver.name = `${process.env.TRAVIS_JOB_NUMBER || 'Suite'}: ${_lodash.default.first(titles)}`;
      }

      if (!driver.errored && this.currentTest.state !== 'passed') {
        driver.name += ` (${fullTitle})`;
        driver.errored = true;
      }
    }

    if (this.currentTest.err) {
      console.error('ERROR:', JSON.stringify(this.currentTest.err, null, 2));
    }
  });
}

async function initDriver() {
  const config = {
    host: HOST,
    port: PORT
  };
  driver = CLOUD ? await _wd.default.promiseChainRemote(config, process.env.SAUCE_USERNAME, process.env.SAUCE_ACCESS_KEY) : await _wd.default.promiseChainRemote(config);
  driver.name = undefined;
  driver.errored = false;
  return driver;
}

async function initServer() {
  server = await (0, _2.startServer)(PORT, HOST);
}

function getServer() {
  return server;
}

async function initWDA(caps) {
  try {
    await (0, _axios.default)({
      url: `http://${HOST}:${WDA_PORT}/status`,
      timeout: 5000
    });
  } catch (err) {
    const desiredCaps = Object.assign({
      autoLaunch: false,
      wdaLocalPort: WDA_PORT
    }, caps);
    await driver.init(desiredCaps);
    await driver.quit();
  }
}

async function initSession(caps) {
  if (!CLOUD) {
    await initServer();
  }

  if (CLOUD) {
    if (!caps.name) {
      caps.name = process.env.SAUCE_JOB_NAME || process.env.TRAVIS_JOB_NUMBER || 'unnamed';
    }
  }

  await initDriver();

  if (process.env.USE_WEBDRIVERAGENTURL) {
    await initWDA(caps);
    caps = Object.assign({
      webDriverAgentUrl: `http://${HOST}:${WDA_PORT}`,
      wdaLocalPort: WDA_PORT
    }, caps);
  }

  const serverRes = await driver.init(caps);

  if (!caps.udid && !caps.fullReset && serverRes[1].udid) {
    caps.udid = serverRes[1].udid;
  }

  return driver;
}

async function deleteSession() {
  try {
    if (CLOUD) {
      await driver.sauceJobUpdate({
        name: driver.name,
        passed: !driver.errored
      });
    }
  } catch (ign) {}

  try {
    await driver.quit();
  } catch (ign) {} finally {
    driver = undefined;
  }

  try {
    await server.close();
  } catch (ign) {}
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
