"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteDeviceWithRetry = deleteDeviceWithRetry;
exports.killAllSimulators = killAllSimulators;
exports.shutdownSimulator = shutdownSimulator;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _nodeSimctl = _interopRequireDefault(require("node-simctl"));

var _asyncbox = require("asyncbox");

var _appiumIosSimulator = require("appium-ios-simulator");

var _utils = require("../../../lib/utils");

async function killAllSimulators() {
  if (process.env.CLOUD) {
    return;
  }

  const simctl = new _nodeSimctl.default();

  const allDevices = _lodash.default.flatMap(_lodash.default.values(await simctl.getDevices()));

  const bootedDevices = allDevices.filter(device => device.state === 'Booted');

  for (const {
    udid
  } of bootedDevices) {
    await (0, _utils.resetTestProcesses)(udid, true);
    simctl.udid = udid;
    await simctl.shutdownDevice();
  }

  await (0, _appiumIosSimulator.killAllSimulators)();
}

async function shutdownSimulator(device) {
  await (0, _utils.resetTestProcesses)(device.udid, true);
  await device.shutdown();
}

async function deleteDeviceWithRetry(udid) {
  const simctl = new _nodeSimctl.default({
    udid
  });

  try {
    await (0, _asyncbox.retryInterval)(10, 1000, simctl.deleteDevice.bind(simctl));
  } catch (ign) {}
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL2hlbHBlcnMvc2ltdWxhdG9yLmpzIiwibmFtZXMiOlsia2lsbEFsbFNpbXVsYXRvcnMiLCJwcm9jZXNzIiwiZW52IiwiQ0xPVUQiLCJzaW1jdGwiLCJTaW1jdGwiLCJhbGxEZXZpY2VzIiwiXyIsImZsYXRNYXAiLCJ2YWx1ZXMiLCJnZXREZXZpY2VzIiwiYm9vdGVkRGV2aWNlcyIsImZpbHRlciIsImRldmljZSIsInN0YXRlIiwidWRpZCIsInJlc2V0VGVzdFByb2Nlc3NlcyIsInNodXRkb3duRGV2aWNlIiwic2ltS2lsbCIsInNodXRkb3duU2ltdWxhdG9yIiwic2h1dGRvd24iLCJkZWxldGVEZXZpY2VXaXRoUmV0cnkiLCJyZXRyeUludGVydmFsIiwiZGVsZXRlRGV2aWNlIiwiYmluZCIsImlnbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4iLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9oZWxwZXJzL3NpbXVsYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFNpbWN0bCBmcm9tICdub2RlLXNpbWN0bCc7XG5pbXBvcnQgeyByZXRyeUludGVydmFsIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsga2lsbEFsbFNpbXVsYXRvcnMgYXMgc2ltS2lsbCB9IGZyb20gJ2FwcGl1bS1pb3Mtc2ltdWxhdG9yJztcbmltcG9ydCB7IHJlc2V0VGVzdFByb2Nlc3NlcyB9IGZyb20gJy4uLy4uLy4uL2xpYi91dGlscyc7XG5cblxuYXN5bmMgZnVuY3Rpb24ga2lsbEFsbFNpbXVsYXRvcnMgKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuQ0xPVUQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBzaW1jdGwgPSBuZXcgU2ltY3RsKCk7XG4gIGNvbnN0IGFsbERldmljZXMgPSBfLmZsYXRNYXAoXy52YWx1ZXMoYXdhaXQgc2ltY3RsLmdldERldmljZXMoKSkpO1xuICBjb25zdCBib290ZWREZXZpY2VzID0gYWxsRGV2aWNlcy5maWx0ZXIoKGRldmljZSkgPT4gZGV2aWNlLnN0YXRlID09PSAnQm9vdGVkJyk7XG5cbiAgZm9yIChjb25zdCB7dWRpZH0gb2YgYm9vdGVkRGV2aWNlcykge1xuICAgIC8vIEl0IGlzIG5lY2Vzc2FyeSB0byBzdG9wIHRoZSBjb3JyZXNwb25kaW5nIHhjb2RlYnVpbGQgcHJvY2VzcyBiZWZvcmUga2lsbGluZ1xuICAgIC8vIHRoZSBzaW11bGF0b3IsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcmVzdGFydGVkXG4gICAgYXdhaXQgcmVzZXRUZXN0UHJvY2Vzc2VzKHVkaWQsIHRydWUpO1xuICAgIHNpbWN0bC51ZGlkID0gdWRpZDtcbiAgICBhd2FpdCBzaW1jdGwuc2h1dGRvd25EZXZpY2UoKTtcbiAgfVxuICBhd2FpdCBzaW1LaWxsKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNodXRkb3duU2ltdWxhdG9yIChkZXZpY2UpIHtcbiAgLy8gc3RvcCBYQ1Rlc3QgcHJvY2Vzc2VzIGlmIHJ1bm5pbmcgdG8gYXZvaWQgdW5leHBlY3RlZCBzaWRlIGVmZmVjdHNcbiAgYXdhaXQgcmVzZXRUZXN0UHJvY2Vzc2VzKGRldmljZS51ZGlkLCB0cnVlKTtcbiAgYXdhaXQgZGV2aWNlLnNodXRkb3duKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZURldmljZVdpdGhSZXRyeSAodWRpZCkge1xuICBjb25zdCBzaW1jdGwgPSBuZXcgU2ltY3RsKHt1ZGlkfSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgcmV0cnlJbnRlcnZhbCgxMCwgMTAwMCwgc2ltY3RsLmRlbGV0ZURldmljZS5iaW5kKHNpbWN0bCkpO1xuICB9IGNhdGNoIChpZ24pIHt9XG59XG5cblxuZXhwb3J0IHsga2lsbEFsbFNpbXVsYXRvcnMsIHNodXRkb3duU2ltdWxhdG9yLCBkZWxldGVEZXZpY2VXaXRoUmV0cnkgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLGVBQWVBLGlCQUFmLEdBQW9DO0VBQ2xDLElBQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUFoQixFQUF1QjtJQUNyQjtFQUNEOztFQUVELE1BQU1DLE1BQU0sR0FBRyxJQUFJQyxtQkFBSixFQUFmOztFQUNBLE1BQU1DLFVBQVUsR0FBR0MsZUFBQSxDQUFFQyxPQUFGLENBQVVELGVBQUEsQ0FBRUUsTUFBRixDQUFTLE1BQU1MLE1BQU0sQ0FBQ00sVUFBUCxFQUFmLENBQVYsQ0FBbkI7O0VBQ0EsTUFBTUMsYUFBYSxHQUFHTCxVQUFVLENBQUNNLE1BQVgsQ0FBbUJDLE1BQUQsSUFBWUEsTUFBTSxDQUFDQyxLQUFQLEtBQWlCLFFBQS9DLENBQXRCOztFQUVBLEtBQUssTUFBTTtJQUFDQztFQUFELENBQVgsSUFBcUJKLGFBQXJCLEVBQW9DO0lBR2xDLE1BQU0sSUFBQUsseUJBQUEsRUFBbUJELElBQW5CLEVBQXlCLElBQXpCLENBQU47SUFDQVgsTUFBTSxDQUFDVyxJQUFQLEdBQWNBLElBQWQ7SUFDQSxNQUFNWCxNQUFNLENBQUNhLGNBQVAsRUFBTjtFQUNEOztFQUNELE1BQU0sSUFBQUMscUNBQUEsR0FBTjtBQUNEOztBQUVELGVBQWVDLGlCQUFmLENBQWtDTixNQUFsQyxFQUEwQztFQUV4QyxNQUFNLElBQUFHLHlCQUFBLEVBQW1CSCxNQUFNLENBQUNFLElBQTFCLEVBQWdDLElBQWhDLENBQU47RUFDQSxNQUFNRixNQUFNLENBQUNPLFFBQVAsRUFBTjtBQUNEOztBQUVELGVBQWVDLHFCQUFmLENBQXNDTixJQUF0QyxFQUE0QztFQUMxQyxNQUFNWCxNQUFNLEdBQUcsSUFBSUMsbUJBQUosQ0FBVztJQUFDVTtFQUFELENBQVgsQ0FBZjs7RUFDQSxJQUFJO0lBQ0YsTUFBTSxJQUFBTyx1QkFBQSxFQUFjLEVBQWQsRUFBa0IsSUFBbEIsRUFBd0JsQixNQUFNLENBQUNtQixZQUFQLENBQW9CQyxJQUFwQixDQUF5QnBCLE1BQXpCLENBQXhCLENBQU47RUFDRCxDQUZELENBRUUsT0FBT3FCLEdBQVAsRUFBWSxDQUFFO0FBQ2pCIn0=
