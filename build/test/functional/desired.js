"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.W3C_CAPS = exports.UICATALOG_SIM_CAPS = exports.UICATALOG_CAPS = exports.TVOS_CAPS = exports.PLATFORM_VERSION = exports.DEVICE_NAME = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _glob = _interopRequireDefault(require("glob"));

var _fs = _interopRequireDefault(require("fs"));

var _appiumSupport = require("appium-support");

function checkFeatureInEnv(envArg) {
  let feature = parseInt(process.env[envArg], 10);

  if (isNaN(feature)) {
    feature = process.env[envArg];
  }

  return !!feature;
}

const PLATFORM_VERSION = process.env.PLATFORM_VERSION ? process.env.PLATFORM_VERSION : '11.3';
exports.PLATFORM_VERSION = PLATFORM_VERSION;
const LAUNCH_WITH_IDB = process.env.LAUNCH_WITH_IDB;
const DEVICE_NAME = process.env.DEVICE_NAME ? process.env.DEVICE_NAME : process.env.SAUCE_RDC ? undefined : _appiumSupport.util.compareVersions(PLATFORM_VERSION, '>=', '13.0') ? 'iPhone 8' : 'iPhone 6';
exports.DEVICE_NAME = DEVICE_NAME;
const SHOW_XCODE_LOG = checkFeatureInEnv('SHOW_XCODE_LOG');
const REAL_DEVICE = checkFeatureInEnv('REAL_DEVICE');
let XCCONFIG_FILE = process.env.XCCONFIG_FILE;

if (REAL_DEVICE && !XCCONFIG_FILE) {
  let cwd = _path.default.resolve(__dirname, '..', '..', '..');

  let files = _glob.default.sync('*.xcconfig', {
    cwd
  });

  if (files.length) {
    XCCONFIG_FILE = _path.default.resolve(cwd, _lodash.default.first(files));
  }
}

let uiCatalogPath;

if (_appiumSupport.system.isMac() && !process.env.CLOUD) {
  uiCatalogPath = parseInt(PLATFORM_VERSION, 10) >= 13 ? require('ios-uicatalog').uiKitCatalog.absolute : require('ios-uicatalog').uiCatalog.absolute;
}

const apps = {};
const CLOUD = process.env.CLOUD;

if (REAL_DEVICE) {
  if (CLOUD) {
    apps.testAppId = 1;
  } else {
    apps.uiCatalogApp = uiCatalogPath.iphoneos;
  }
} else {
  if (CLOUD) {
    apps.uiCatalogApp = 'http://appium.github.io/appium/assets/UICatalog9.4.app.zip';
    apps.touchIdApp = null;
  } else {
    apps.uiCatalogApp = uiCatalogPath.iphonesimulator;
    apps.touchIdApp = _path.default.resolve('.', 'test', 'assets', 'TouchIDExample.app');
  }
}

const REAL_DEVICE_CAPS = REAL_DEVICE ? {
  udid: 'auto',
  xcodeConfigFile: XCCONFIG_FILE,
  webkitResponseTimeout: 30000,
  testobject_app_id: apps.testAppId,
  testobject_api_key: process.env.SAUCE_RDC_ACCESS_KEY,
  testobject_remote_appium_url: process.env.APPIUM_STAGING_URL
} : {};
let GENERIC_CAPS = {
  platformName: 'iOS',
  platformVersion: PLATFORM_VERSION,
  deviceName: DEVICE_NAME,
  automationName: 'XCUITest',
  launchWithIDB: !!LAUNCH_WITH_IDB,
  noReset: true,
  maxTypingFrequency: 30,
  clearSystemFiles: true,
  showXcodeLog: SHOW_XCODE_LOG,
  wdaLaunchTimeout: 60 * 1000 * 4,
  wdaConnectionTimeout: 60 * 1000 * 8,
  useNewWDA: true,
  simulatorStartupTimeout: 240000
};

if (process.env.CLOUD) {
  GENERIC_CAPS.platformVersion = process.env.CLOUD_PLATFORM_VERSION;
  GENERIC_CAPS.build = process.env.SAUCE_BUILD;
  GENERIC_CAPS.showIOSLog = false;
  GENERIC_CAPS[process.env.APPIUM_BUNDLE_CAP || 'appium-version'] = {
    'appium-url': 'sauce-storage:appium.zip'
  };
}

if (!REAL_DEVICE && !process.env.CLOUD) {
  if (!_fs.default.existsSync(apps.uiCatalogApp)) {
    apps.uiCatalogApp = _path.default.resolve('.', 'test', 'assets', `${parseInt(PLATFORM_VERSION, 10) >= 13 ? 'UIKitCatalog' : 'UICatalog'}-iphonesimulator.app`);
  }

  if (!_fs.default.existsSync(apps.iosTestApp)) {
    apps.iosTestApp = _path.default.resolve('.', 'test', 'assets', 'TestApp-iphonesimulator.app');
  }
}

const UICATALOG_CAPS = _lodash.default.defaults({
  app: apps.uiCatalogApp
}, GENERIC_CAPS, REAL_DEVICE_CAPS);

exports.UICATALOG_CAPS = UICATALOG_CAPS;

const UICATALOG_SIM_CAPS = _lodash.default.defaults({
  app: apps.uiCatalogApp
}, GENERIC_CAPS);

exports.UICATALOG_SIM_CAPS = UICATALOG_SIM_CAPS;
delete UICATALOG_SIM_CAPS.noReset;
const W3C_CAPS = {
  capabilities: {
    alwaysMatch: UICATALOG_CAPS,
    firstMatch: [{}]
  }
};
exports.W3C_CAPS = W3C_CAPS;

let TVOS_CAPS = _lodash.default.defaults({
  platformName: 'tvOS',
  bundleId: 'com.apple.TVSettings',
  deviceName: 'Apple TV'
}, GENERIC_CAPS);

exports.TVOS_CAPS = TVOS_CAPS;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
