"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _utils = require("../../lib/utils");

var _constants = require("../../lib/constants");

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _appiumTestSupport = require("appium-test-support");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _assert = require("assert");

_chai.default.should();

_chai.default.use(_chaiAsPromised.default);

describe('utils', function () {
  describe('#getXctestrunFilePath', (0, _appiumTestSupport.withMocks)({
    fs: _appiumSupport.fs
  }, function (mocks) {
    const platformVersion = '12.0';
    const sdkVersion = '12.2';
    const udid = 'xxxxxyyyyyyzzzzzz';
    const bootstrapPath = 'path/to/data';
    const platformName = _constants.PLATFORM_NAME_IOS;
    afterEach(function () {
      mocks.verify();
    });
    it('should return sdk based path with udid', async function () {
      mocks.fs.expects('exists').withExactArgs(_path.default.resolve(`${bootstrapPath}/${udid}_${sdkVersion}.xctestrun`)).returns(true);
      mocks.fs.expects('copyFile').never();
      const deviceInfo = {
        isRealDevice: true,
        udid,
        platformVersion,
        platformName
      };
      await (0, _utils.getXctestrunFilePath)(deviceInfo, sdkVersion, bootstrapPath).should.eventually.equal(_path.default.resolve(`${bootstrapPath}/${udid}_${sdkVersion}.xctestrun`));
    });
    it('should return sdk based path without udid, copy them', async function () {
      mocks.fs.expects('exists').withExactArgs(_path.default.resolve(`${bootstrapPath}/${udid}_${sdkVersion}.xctestrun`)).returns(false);
      mocks.fs.expects('exists').withExactArgs(_path.default.resolve(`${bootstrapPath}/WebDriverAgentRunner_iphoneos${sdkVersion}-arm64.xctestrun`)).returns(true);
      mocks.fs.expects('copyFile').withExactArgs(_path.default.resolve(`${bootstrapPath}/WebDriverAgentRunner_iphoneos${sdkVersion}-arm64.xctestrun`), _path.default.resolve(`${bootstrapPath}/${udid}_${sdkVersion}.xctestrun`)).returns(true);
      const deviceInfo = {
        isRealDevice: true,
        udid,
        platformVersion
      };
      await (0, _utils.getXctestrunFilePath)(deviceInfo, sdkVersion, bootstrapPath).should.eventually.equal(_path.default.resolve(`${bootstrapPath}/${udid}_${sdkVersion}.xctestrun`));
    });
    it('should return platform based path', async function () {
      mocks.fs.expects('exists').withExactArgs(_path.default.resolve(`${bootstrapPath}/${udid}_${sdkVersion}.xctestrun`)).returns(false);
      mocks.fs.expects('exists').withExactArgs(_path.default.resolve(`${bootstrapPath}/WebDriverAgentRunner_iphonesimulator${sdkVersion}-x86_64.xctestrun`)).returns(false);
      mocks.fs.expects('exists').withExactArgs(_path.default.resolve(`${bootstrapPath}/${udid}_${platformVersion}.xctestrun`)).returns(true);
      mocks.fs.expects('copyFile').never();
      const deviceInfo = {
        isRealDevice: false,
        udid,
        platformVersion
      };
      await (0, _utils.getXctestrunFilePath)(deviceInfo, sdkVersion, bootstrapPath).should.eventually.equal(_path.default.resolve(`${bootstrapPath}/${udid}_${platformVersion}.xctestrun`));
    });
    it('should return platform based path without udid, copy them', async function () {
      mocks.fs.expects('exists').withExactArgs(_path.default.resolve(`${bootstrapPath}/${udid}_${sdkVersion}.xctestrun`)).returns(false);
      mocks.fs.expects('exists').withExactArgs(_path.default.resolve(`${bootstrapPath}/WebDriverAgentRunner_iphonesimulator${sdkVersion}-x86_64.xctestrun`)).returns(false);
      mocks.fs.expects('exists').withExactArgs(_path.default.resolve(`${bootstrapPath}/${udid}_${platformVersion}.xctestrun`)).returns(false);
      mocks.fs.expects('exists').withExactArgs(_path.default.resolve(`${bootstrapPath}/WebDriverAgentRunner_iphonesimulator${platformVersion}-x86_64.xctestrun`)).returns(true);
      mocks.fs.expects('copyFile').withExactArgs(_path.default.resolve(`${bootstrapPath}/WebDriverAgentRunner_iphonesimulator${platformVersion}-x86_64.xctestrun`), _path.default.resolve(`${bootstrapPath}/${udid}_${platformVersion}.xctestrun`)).returns(true);
      const deviceInfo = {
        isRealDevice: false,
        udid,
        platformVersion
      };
      await (0, _utils.getXctestrunFilePath)(deviceInfo, sdkVersion, bootstrapPath).should.eventually.equal(_path.default.resolve(`${bootstrapPath}/${udid}_${platformVersion}.xctestrun`));
    });
    it('should raise an exception because of no files', async function () {
      const expected = _path.default.resolve(`${bootstrapPath}/WebDriverAgentRunner_iphonesimulator${sdkVersion}-x86_64.xctestrun`);

      mocks.fs.expects('exists').exactly(4).returns(false);
      const deviceInfo = {
        isRealDevice: false,
        udid,
        platformVersion
      };

      try {
        await (0, _utils.getXctestrunFilePath)(deviceInfo, sdkVersion, bootstrapPath);
        (0, _assert.fail)();
      } catch (err) {
        err.message.should.equal(`If you are using 'useXctestrunFile' capability then you need to have a xctestrun file (expected: '${expected}')`);
      }
    });
  }));
  describe('#getAdditionalRunContent', function () {
    it('should return ios format', function () {
      const wdaPort = (0, _utils.getAdditionalRunContent)(_constants.PLATFORM_NAME_IOS, 8000);
      wdaPort.WebDriverAgentRunner.EnvironmentVariables.USE_PORT.should.equal('8000');
    });
    it('should return tvos format', function () {
      const wdaPort = (0, _utils.getAdditionalRunContent)(_constants.PLATFORM_NAME_TVOS, '9000');
      wdaPort.WebDriverAgentRunner_tvOS.EnvironmentVariables.USE_PORT.should.equal('9000');
    });
  });
  describe('#getXctestrunFileName', function () {
    const platformVersion = '12.0';
    const udid = 'xxxxxyyyyyyzzzzzz';
    it('should return ios format, real device', function () {
      const platformName = 'iOs';
      const deviceInfo = {
        isRealDevice: true,
        udid,
        platformVersion,
        platformName
      };
      (0, _utils.getXctestrunFileName)(deviceInfo, '10.2.0').should.equal('WebDriverAgentRunner_iphoneos10.2.0-arm64.xctestrun');
    });
    it('should return ios format, simulator', function () {
      const platformName = 'ios';
      const deviceInfo = {
        isRealDevice: false,
        udid,
        platformVersion,
        platformName
      };
      (0, _utils.getXctestrunFileName)(deviceInfo, '10.2.0').should.equal('WebDriverAgentRunner_iphonesimulator10.2.0-x86_64.xctestrun');
    });
    it('should return tvos format, real device', function () {
      const platformName = 'tVos';
      const deviceInfo = {
        isRealDevice: true,
        udid,
        platformVersion,
        platformName
      };
      (0, _utils.getXctestrunFileName)(deviceInfo, '10.2.0').should.equal('WebDriverAgentRunner_tvOS_appletvos10.2.0-arm64.xctestrun');
    });
    it('should return tvos format, simulator', function () {
      const platformName = 'tvOS';
      const deviceInfo = {
        isRealDevice: false,
        udid,
        platformVersion,
        platformName
      };
      (0, _utils.getXctestrunFileName)(deviceInfo, '10.2.0').should.equal('WebDriverAgentRunner_tvOS_appletvsimulator10.2.0-x86_64.xctestrun');
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
